// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  user
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      UserRole  @default(user)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  profile   Profile?
  comments  Comment[]
  posts     Post[]
}

model Profile {
  id        Int      @id @default(autoincrement())
  age       Int
  address   String   @db.VarChar(255)
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id         Int               @id @default(autoincrement())
  title      String
  details    String
  userId     Int
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments   Comment[]
  categories CategoriesPosts[]
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int               @id @default(autoincrement())
  name      String
  posts     CategoriesPosts[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model CategoriesPosts {
  postId     Int
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([postId, categoryId])
}
